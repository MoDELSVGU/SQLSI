DROP PROCEDURE IF EXISTS Q1;
/* SELECT lecturer_id from Lecturer */
DELIMITER //
CREATE PROCEDURE Q1(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT lecturer_id AS lecturer_id FROM Lecturer
);
IF _rollback = 0
THEN SELECT * from TEMP1;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q2;
/* SELECT 1 from Lecturer */
DELIMITER //
CREATE PROCEDURE Q2(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT 1 FROM Lecturer
);
IF _rollback = 0
THEN SELECT * from TEMP1;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q3;
/* SELECT email FROM Lecturer */
DELIMITER //
CREATE PROCEDURE Q3(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM Lecturer
);
IF _rollback = 0
THEN SELECT * from TEMP1;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q4;
/* SELECT email FROM Lecturer WHERE Lecturer_id = 'Huong' */
DELIMITER //
CREATE PROCEDURE Q4(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT * FROM Lecturer WHERE Lecturer_id = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP1
);
IF _rollback = 0
THEN SELECT * from TEMP2;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q5;
/* SELECT lecturers from Enrollment */
DELIMITER //
CREATE PROCEDURE Q5(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT lecturers FROM Enrollment
);
IF _rollback = 0
THEN SELECT * from TEMP3;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q6;
/* SELECT 1 from Enrollment */
DELIMITER //
CREATE PROCEDURE Q6(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT 1 FROM Enrollment
);
IF _rollback = 0
THEN SELECT * from TEMP3;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q7;
/* SELECT students FROM Enrollment WHERE lecturers = 'Huong' */
DELIMITER //
CREATE PROCEDURE Q7(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student WHERE Lecturer_id = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT students FROM Enrollment WHERE lecturers = 'Huong'
);
IF _rollback = 0
THEN SELECT * from TEMP3;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q8;
/* SELECT lecturers from Enrollment WHERE lecturers = students */
DELIMITER //
CREATE PROCEDURE Q8(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student WHERE Lecturer_id = Student_id
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT lecturers FROM Enrollment WHERE lecturers = students
);
IF _rollback = 0
THEN SELECT * from TEMP3;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q9;
/* SELECT students FROM Enrollment WHERE lecturers = 'Hieu' */
DELIMITER //
CREATE PROCEDURE Q9(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student WHERE Lecturer_id = 'Hieu'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT students FROM Enrollment WHERE lecturers = 'Hieu'
);
IF _rollback = 0
THEN SELECT * from TEMP3;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q10;
/* SELECT TEMP.Lecturer_id FROM (SELECT Lecturer_id, email FROM Lecturer) as TEMP */
DELIMITER //
CREATE PROCEDURE Q10(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS Lecturer_id, CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM Lecturer
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT TEMP.Lecturer_id FROM (SELECT Lecturer_id, email FROM Lecturer) AS TEMP
);
IF _rollback = 0
THEN SELECT * from TEMP2;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q11;
/* SELECT TEMP.email FROM (SELECT email FROM Lecturer WHERE Lecturer_id = 'Huong') as TEMP */
DELIMITER //
CREATE PROCEDURE Q11(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT * FROM Lecturer WHERE Lecturer_id = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT TEMP.email FROM (SELECT email FROM Lecturer WHERE Lecturer_id = 'Huong') AS TEMP
);
IF _rollback = 0
THEN SELECT * from TEMP3;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q12;
/* SELECT TEMP.email FROM (SELECT email, lecturer_id FROM Lecturer) AS TEMP WHERE TEMP.Lecturer_id = 'Huong' */
DELIMITER //
CREATE PROCEDURE Q12(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email, lecturer_id AS lecturer_id FROM Lecturer
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT TEMP.email FROM (SELECT email, lecturer_id FROM Lecturer) AS TEMP WHERE TEMP.Lecturer_id = 'Huong'
);
IF _rollback = 0
THEN SELECT * from TEMP2;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q13;
/* SELECT email FROM Lecturer JOIN Enrollment ON Lecturer_id = lecturers */
DELIMITER //
CREATE PROCEDURE Q13(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT * FROM Lecturer JOIN Enrollment ON Lecturer_id = lecturers
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT * FROM TEMP3
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP4
);
IF _rollback = 0
THEN SELECT * from TEMP5;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q14;
/* SELECT email FROM Lecturer JOIN Enrollment ON Lecturer_id = 'Huong' */
DELIMITER //
CREATE PROCEDURE Q14(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT * FROM Lecturer JOIN Enrollment ON Lecturer_id = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT * FROM TEMP3
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP4
);
IF _rollback = 0
THEN SELECT * from TEMP5;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q15;
/* SELECT email FROM Lecturer JOIN Enrollment ON Lecturer_id = lecturers WHERE lecturers = 'Huong' */
DELIMITER //
CREATE PROCEDURE Q15(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT * FROM Lecturer JOIN Enrollment ON Lecturer_id = lecturers
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT * FROM TEMP3 WHERE lecturers = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP4
);
IF _rollback = 0
THEN SELECT * from TEMP5;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q16;
/* SELECT email FROM Lecturer JOIN (SELECT lecturers FROM Enrollment WHERE lecturers = 'Huong') AS TEMP ON Lecturer_id = TEMP.lecturers */
DELIMITER //
CREATE PROCEDURE Q16(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student WHERE Lecturer_id = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT lecturers FROM Enrollment WHERE lecturers = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT * FROM Lecturer JOIN TEMP3 AS TEMP ON Lecturer_id = TEMP.lecturers
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT * FROM TEMP4
);
DROP TEMPORARY TABLE IF EXISTS TEMP6;
CREATE TEMPORARY TABLE TEMP6 AS (
SELECT CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP5
);
IF _rollback = 0
THEN SELECT * from TEMP6;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q17;
/* SELECT TEMP.email FROM Enrollment JOIN (SELECT Lecturer_id, email FROM Lecturer WHERE Lecturer_id = 'Huong') AS TEMP ON TEMP.Lecturer_id = lecturers */
DELIMITER //
CREATE PROCEDURE Q17(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT * FROM Lecturer WHERE Lecturer_id = 'Huong'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT Lecturer_id AS Lecturer_id, CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT TEMP.Lecturer_id AS lecturers, Student_id AS students FROM Student JOIN TEMP2 AS TEMP ON TEMP.Lecturer_id = TEMP.Lecturer_id
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP3
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT TEMP.email FROM Enrollment JOIN (SELECT Lecturer_id, email FROM Lecturer WHERE Lecturer_id = 'Huong') AS TEMP ON TEMP.Lecturer_id = lecturers
);
IF _rollback = 0
THEN SELECT * from TEMP5;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q18;
/* SELECT TEMP.email FROM Enrollment JOIN (SELECT Lecturer_id, email FROM Lecturer WHERE Lecturer_id = 'Trang') AS TEMP ON TEMP.Lecturer_id = lecturers */
DELIMITER //
CREATE PROCEDURE Q18(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT * FROM Lecturer WHERE Lecturer_id = 'Trang'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT Lecturer_id AS Lecturer_id, CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT TEMP.Lecturer_id AS lecturers, Student_id AS students FROM Student JOIN TEMP2 AS TEMP ON TEMP.Lecturer_id = TEMP.Lecturer_id
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP3
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT TEMP.email FROM Enrollment JOIN (SELECT Lecturer_id, email FROM Lecturer WHERE Lecturer_id = 'Trang') AS TEMP ON TEMP.Lecturer_id = lecturers
);
IF _rollback = 0
THEN SELECT * from TEMP5;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Q19;
/* SELECT TEMP.email FROM (SELECT lecturers FROM Enrollment) AS TEMP1 JOIN (SELECT Lecturer_id, email FROM Lecturer WHERE Lecturer_id = 'Trang') AS TEMP2 ON TEMP2.Lecturer_id = TEMP1.lecturers */
DELIMITER //
CREATE PROCEDURE Q19(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Lecturer_id AS lecturers, Student_id AS students FROM Lecturer, Student
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Enrollment(kcaller, krole, lecturers, students) WHEN TRUE THEN lecturers ELSE throw_error() END AS lecturers FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT lecturers FROM Enrollment
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT * FROM Lecturer WHERE Lecturer_id = 'Trang'
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT Lecturer_id AS Lecturer_id, CASE auth_READ_Lecturer_email(kcaller, krole, Lecturer_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM TEMP4
);
DROP TEMPORARY TABLE IF EXISTS TEMP6;
CREATE TEMPORARY TABLE TEMP6 AS (
SELECT TEMP.email FROM (SELECT lecturers FROM Enrollment) AS TEMP1 JOIN (SELECT Lecturer_id, email FROM Lecturer WHERE Lecturer_id = 'Trang') AS TEMP2 ON TEMP2.Lecturer_id = TEMP1.lecturers
);
IF _rollback = 0
THEN SELECT * from TEMP6;
END IF;
END //
DELIMITER ;

