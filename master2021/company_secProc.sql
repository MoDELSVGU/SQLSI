DROP PROCEDURE IF EXISTS Query1;
/* SELECT email FROM Employee */
DELIMITER //
CREATE PROCEDURE Query1(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT CASE auth_READ_Employee_email(kcaller, krole, Employee_id) WHEN TRUE THEN email ELSE throw_error() END AS email FROM Employee
);
IF _rollback = 0
THEN SELECT * from TEMP1;
END IF;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS Query2;
/* SELECT salary FROM Employee JOIN (SELECT * FROM Supervision WHERE supervisors = 'B') ON supervisees = Employeee */
DELIMITER //
CREATE PROCEDURE Query2(in kcaller varchar(250), in krole varchar(250))
BEGIN
DECLARE _rollback int DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
  SET _rollback = 1;
  GET STACKED DIAGNOSTICS CONDITION 1 @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
  SELECT @p1, @p2;
  ROLLBACK;
END;
START TRANSACTION;
DROP TEMPORARY TABLE IF EXISTS TEMP1;
CREATE TEMPORARY TABLE TEMP1 AS (
SELECT Employee_id AS supervisees, Employee_id AS supervisors FROM Employee, Employee WHERE Employee_id = 'B'
);
DROP TEMPORARY TABLE IF EXISTS TEMP2;
CREATE TEMPORARY TABLE TEMP2 AS (
SELECT CASE auth_READ_Supervision(kcaller, krole, supervisees, supervisors) WHEN TRUE THEN supervisees ELSE throw_error() END AS supervisees FROM TEMP1
);
DROP TEMPORARY TABLE IF EXISTS TEMP3;
CREATE TEMPORARY TABLE TEMP3 AS (
SELECT * FROM Supervision WHERE supervisors = 'B'
);
DROP TEMPORARY TABLE IF EXISTS TEMP4;
CREATE TEMPORARY TABLE TEMP4 AS (
SELECT * FROM Employee JOIN TEMP3 ON supervisees = Employeee
);
DROP TEMPORARY TABLE IF EXISTS TEMP5;
CREATE TEMPORARY TABLE TEMP5 AS (
SELECT * FROM TEMP4
);
DROP TEMPORARY TABLE IF EXISTS TEMP6;
CREATE TEMPORARY TABLE TEMP6 AS (
SELECT CASE auth_READ_Employee_salary(kcaller, krole, Employee_id) WHEN TRUE THEN salary ELSE throw_error() END AS salary FROM TEMP5
);
IF _rollback = 0
THEN SELECT * from TEMP6;
END IF;
END //
DELIMITER ;

